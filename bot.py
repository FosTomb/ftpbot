import nest_asyncio
nest_asyncio.apply()

import asyncio
import threading
import posixpath
import stat
import re
from io import BytesIO

import paramiko
import pytz
from ftplib import FTP, error_perm
from apscheduler.schedulers.asyncio import AsyncIOScheduler



# --- –§—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ---
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∏–º–µ–Ω) –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
known_items = set()

def extract_code(name: str) -> str:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –ª–∏–±–æ 12-–∑–Ω–∞—á–Ω—ã–π (UPC), –ª–∏–±–æ 13-–∑–Ω–∞—á–Ω—ã–π (EAN) –∫–æ–¥ –∏–∑ –∏–º–µ–Ω–∏.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∫–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ; –∏–Ω–∞—á–µ ‚Äì –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è.
    """
    match = re.search(r'\b(\d{12}|\d{13})\b', name)
    if match:
        return match.group(0)
    return name

async def check_new_items(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data  # –ø–æ–ª—É—á–∞–µ–º chat_id, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ data
    global known_items
    try:
        transport = paramiko.Transport((source_sftp_config['host'], 22))
        transport.connect(username=source_sftp_config['username'], password=source_sftp_config['password'])
        sftp = paramiko.SFTPClient.from_transport(transport)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        items = sftp.listdir(source_sftp_config['directory'])
        sftp.close()
        transport.close()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for item in items:
            if item not in known_items:
                known_items.add(item)
                code = extract_code(item)
                await context.bot.send_message(chat_id=chat_id, text=f"–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑: {code}")
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ñ–∞–π–ª–æ–≤ ---
def ftp_mkdir_p(ftp, remote_directory):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ FTP-—Å–µ—Ä–≤–µ—Ä–µ.
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å.
    """
    dirs = remote_directory.strip("/").split("/")
    current_path = ""
    for d in dirs:
        current_path += "/" + d
        try:
            ftp.mkd(current_path)
        except error_perm:
            pass

def transfer_dir(sftp, ftp, sftp_path, ftp_base, send_update, relative_path=""):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ —Å SFTP –Ω–∞ FTP.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è —Å SFTP.
    """
    current_sftp_path = posixpath.join(sftp_path, relative_path)
    current_ftp_path = posixpath.join(ftp_base, relative_path)

    ftp.cwd('/')
    ftp_mkdir_p(ftp, current_ftp_path)

    for item in sftp.listdir_attr(current_sftp_path):
        sftp_item_path = posixpath.join(current_sftp_path, item.filename)
        relative_item_path = posixpath.join(relative_path, item.filename)
        if stat.S_ISDIR(item.st_mode):
            send_update(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏: {relative_item_path}")
            transfer_dir(sftp, ftp, sftp_path, ftp_base, send_update, relative_item_path)
        elif stat.S_ISREG(item.st_mode):
            send_update(f"üìÑ –ü–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–∞: {relative_item_path}")
            ftp.cwd('/')
            ftp_mkdir_p(ftp, posixpath.dirname(relative_item_path))
            with BytesIO() as buffer:
                sftp.getfo(sftp_item_path, buffer)
                buffer.seek(0)
                ftp.storbinary(f"STOR {item.filename}", buffer)
            sftp.remove(sftp_item_path)
            send_update(f"üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª—ë–Ω —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {relative_item_path}")
    if relative_path:
        try:
            sftp.rmdir(current_sftp_path)
            send_update(f"üóëÔ∏è –ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {relative_path}")
        except Exception as e:
            send_update(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {relative_path}: {e}")

def sftp_to_ftp_with_structure(source_cfg, dest_cfg, send_update):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SFTP –∏ FTP, –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
    """
    try:
        transport = paramiko.Transport((source_cfg['host'], 22))
        transport.connect(username=source_cfg['username'], password=source_cfg['password'])
        sftp = paramiko.SFTPClient.from_transport(transport)
    except Exception as e:
        send_update(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SFTP: {e}")
        return

    try:
        ftp = FTP(dest_cfg['host'])
        ftp.login(dest_cfg['user'], dest_cfg['passwd'])
    except Exception as e:
        send_update(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP: {e}")
        sftp.close()
        transport.close()
        return

    try:
        transfer_dir(sftp, ftp, source_cfg['directory'], dest_cfg['directory'], send_update)
        send_update("‚úÖ –ü–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        send_update(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Ñ–∞–π–ª–æ–≤: {e}")
    finally:
        try:
            sftp.close()
            transport.close()
            ftp.quit()
        except Exception:
            pass

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
                                    "/monitor ‚Äì –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤\n"
                                    "/stopmonitor ‚Äì –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
                                    "/transfer ‚Äì –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ñ–∞–π–ª—ã —Å SFTP –Ω–∞ FTP")

async def monitor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥) —Å –ø–µ—Ä–µ–¥–∞—á–µ–π chat_id —á–µ—Ä–µ–∑ data
    context.job_queue.run_repeating(check_new_items, interval=30, first=0, data=chat_id, name=str(chat_id))
    await update.message.reply_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –∑–∞–ø—É—â–µ–Ω.")

async def stopmonitor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    current_jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    for job in current_jobs:
        job.schedule_removal()
    await update.message.reply_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def transfer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text("–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:
    def send_update(message):
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ send_message –≤ –æ—Å–Ω–æ–≤–Ω–æ–º event loop
        asyncio.run_coroutine_threadsafe(
            context.bot.send_message(chat_id=chat_id, text=message),
            context.application.loop
        )

    def run_transfer():
        try:
            sftp_to_ftp_with_structure(source_sftp_config, dest_ftp_config, send_update)
        except Exception as e:
            send_update(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ–Ω–æ—Å–∞: {e}")

    thread = threading.Thread(target=run_transfer)
    thread.start()


# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
async def main():
    app = ApplicationBuilder() \
        .token("7972509725:AAEcvy6pv0V6cFyFBtOURZAGk__Mc8bDS_E") \
        .build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("monitor", monitor))
    app.add_handler(CommandHandler("stopmonitor", stopmonitor))
    app.add_handler(CommandHandler("transfer", transfer))
    
    await app.run_polling(close_loop=False)

# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π event loop
loop = asyncio.get_event_loop()
loop.run_until_complete(main())
